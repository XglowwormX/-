Set的值是具有唯一性的
Set方法：（创建类似数组的东西）
add(value):添加某个值，返回Set结构本身。
delete(value):删除某个值，返回一个布尔值，表示删除成功。
has(value):返回一个布尔值，表示参数是否为Set的成员。
clear():清除所有成员，没有返回值。
keys() :返回一个键名的遍历器
values() :返回一个值的遍历器
entries() :返回一个键值对的遍历器
forEach():使用回调函数遍历每个成员
    例：
    const set = new Set([1, 2, 3, 4, 5, 6])
    set.delete(2); // true
    利用set唯一性 简单数组去重:
        let arr = [1, 2, 3, 2, 4, 5, 4, 1];
        let set = new Set(arr);
        let arr_unique = Array.from(set);  //转为数组格式   打印结果//[1, 2, 3, 4, 5]
    利用set实现 交集差集：
        let a = new Set([1, 2, 3]);
        let b = new Set([3, 5, 2]);
        // 并集 let unionSet = new Set([...a, ...b]); //[1,2,3,5] 
        // 交集 let intersectionSet = new Set([...a].filter(x => b.has(x))); // [2,3] 
        // ab差集 let differenceABSet = new Set([...a].filter(x => !b.has(x)));

        
        
Map方法：（创建类似对象的东西）
    var map = new Map(); //创建一个新的,空的Map  
    map.set("one",1); //增加列表项  
    map.set("two",2);  
    console.log(map.size); //2，获取元素个数  
    if(map.has("one")){ //true，判断元素存在  
        console.log("one");  
    }  
    console.log(map.get("one")); //1，根据key获取元素  
    map.forEach(function(value, key, map){ //遍历map  
        console.log(key + ":" + value); //one:1,two:2  
    });  
    for(var key of map.keys()){ //返回key的迭代器  
        console.log(key); //one,two  
    }  
    for(var value of map.values()){ //返回值的迭代器  
        console.log(value); //1,2  
    }  
    for(var [key,value] of map.entries()){ //返回项的迭代器  
        console.log(value); //1,2  
    }  
    console.log(map.delete("one")); //true,根据key删除项  
    map.clear(); //清空map  
    console.log(map.size); //0  

    var a = [["one",1],["two",2]];  
    var map1 = new Map(a); //new Map(pairs)，通过数组或者已存在的map创建Map  
    map1.forEach(function(value, key, map){   
        console.log(key + ":" + value); //one:1,two:2  
    });  
